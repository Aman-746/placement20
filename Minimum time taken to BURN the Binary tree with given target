/************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    
    // Write your code here
        // first we will find the node corresponding to the start

        BinaryTreeNode<int>* target;
        unordered_map<int,BinaryTreeNode<int>*>mp;
        mp[root->data]=NULL;
        queue<BinaryTreeNode<int>*>q;
        q.push(root);
        
        // creating map {node,parent}
        while(!q.empty()){
            BinaryTreeNode<int>* node=q.front();
            q.pop();
            if(node->data==start) target=node;
            if(node->left){
                q.push(node->left);
                mp[node->left->data]=node;
            }
            if(node->right){
                q.push(node->right);
                mp[node->right->data]=node;
            }
        }
        
        // distWise will contain left node, right node and parent node address according 
        // to distance
        queue<BinaryTreeNode<int>*>distWise;
        distWise.push(target);
        
        // this is for the visited node, it will contain node->val and integer
        unordered_map<int,int>vis;
        vis[target->data]=1;
        int cnt=0;
        while(!distWise.empty()){
            // if(cnt==k) break;
            cnt++;
            int n=distWise.size();
            for(int i=0;i<n;i++){
                BinaryTreeNode<int>* node=distWise.front();
                distWise.pop();
                if(node->left && vis.find(node->left->data)==vis.end()){
                    distWise.push(node->left);
                    vis[node->left->data]=1;
                }
                if(node->right && vis.find(node->right->data)==vis.end()){
                    distWise.push(node->right);
                    vis[node->right->data]=1;
                }
                if(mp[node->data]!=NULL && vis.find(mp[node->data]->data)==vis.end()){
                    distWise.push(mp[node->data]);
                    vis[mp[node->data]->data]=1;
                }
            }
        }
        
        // vector<BinaryTreeNode<int>*>ans;
        // while(!distWise.empty()){
        //     BinaryTreeNode<int>* node=distWise.front();
        //     distWise.pop();
        //     ans.push_back(node);
        // }
        
        return cnt-1;
}
