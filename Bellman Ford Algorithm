#include <bits/stdc++.h> 
int bellmonFord(int n, int m, int src, int dest, vector<vector<int>> &edges) {
    // Write your code here.

    // iterate n-1 times and update distance array again and again
    // it is actually the same thing we are going to one node from another node when the
    // starting node distance is known.
    vector<int>dist(n+1,1e9);
    dist[src]=0;
    for(int iteration=1;iteration<n;iteration++){
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            if(dist[u]!=1e9 && dist[u]+wt<dist[v]){
                dist[v]=dist[u]+wt;
            }
        }
    }

    // one more relaxation to check negative weight cycle
    // as we know according to bellman ford that in even worst case n-1 iteration is
    // enough to calculate shortest distance to each node from source node, if in further
    // iteration the value of distance array is changing then it means there is a cycle
    // tabhi distance array ki value aur decrease ho rhi hai

    bool cycle=false;
    for(auto it:edges){
        int u=it[0];
        int v=it[1];
        int wt=it[2];
        if(dist[u]!=1e9 && dist[u]+wt<dist[v]){
            cycle=true;
            break;
        }
    }

    if(cycle) return -1;
    return dist[dest];
}
